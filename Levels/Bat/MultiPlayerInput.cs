//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Levels/Bat/MultiPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MultiPlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MultiPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MultiPlayerInput"",
    ""maps"": [
        {
            ""name"": ""MultiPlayer"",
            ""id"": ""d4b6b99a-7657-4636-abcb-fda7fbad7c6d"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8e2eda29-c8ea-4161-ae5e-12cf4941abd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bottom"",
                    ""type"": ""Button"",
                    ""id"": ""2c4f0a04-ac58-413b-a67c-c01f6d15167d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""3fa584e2-ad83-42df-96d8-4360641b5e51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""9818f7ba-84ac-469d-bb8f-78c4119fa9dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""543278b0-e0f2-49b5-9fce-1c6e5af700b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""212e3e60-19a7-42bc-8474-ec8025df412a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""3288a55e-7921-49f3-8ce4-594e7be87ab8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""b2846756-8c26-43ab-931c-5d5ea786d0e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e86f54c1-2fb5-48a2-9598-f87d5ae53702"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db79a7b9-fae8-4e2f-b2fc-0fe7dcdba46c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00d7a73-d5ba-437a-a2bf-e6f26cdd9de3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8de37bd-6905-4635-9f63-bf38ca1db66b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f040d541-118d-4b1c-a430-e66bf5e07169"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f449050-18a9-4f91-8543-440b36180563"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d2c467c-1507-4a46-88c8-79e107a2c6ca"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc4c7bfd-ed5b-46ec-87a5-3de637bcadbe"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MultiPlayer
        m_MultiPlayer = asset.FindActionMap("MultiPlayer", throwIfNotFound: true);
        m_MultiPlayer_Left = m_MultiPlayer.FindAction("Left", throwIfNotFound: true);
        m_MultiPlayer_Bottom = m_MultiPlayer.FindAction("Bottom", throwIfNotFound: true);
        m_MultiPlayer_Up = m_MultiPlayer.FindAction("Up", throwIfNotFound: true);
        m_MultiPlayer_Right = m_MultiPlayer.FindAction("Right", throwIfNotFound: true);
        m_MultiPlayer_LeftArrow = m_MultiPlayer.FindAction("LeftArrow", throwIfNotFound: true);
        m_MultiPlayer_UpArrow = m_MultiPlayer.FindAction("UpArrow", throwIfNotFound: true);
        m_MultiPlayer_DownArrow = m_MultiPlayer.FindAction("DownArrow", throwIfNotFound: true);
        m_MultiPlayer_RightArrow = m_MultiPlayer.FindAction("RightArrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MultiPlayer
    private readonly InputActionMap m_MultiPlayer;
    private IMultiPlayerActions m_MultiPlayerActionsCallbackInterface;
    private readonly InputAction m_MultiPlayer_Left;
    private readonly InputAction m_MultiPlayer_Bottom;
    private readonly InputAction m_MultiPlayer_Up;
    private readonly InputAction m_MultiPlayer_Right;
    private readonly InputAction m_MultiPlayer_LeftArrow;
    private readonly InputAction m_MultiPlayer_UpArrow;
    private readonly InputAction m_MultiPlayer_DownArrow;
    private readonly InputAction m_MultiPlayer_RightArrow;
    public struct MultiPlayerActions
    {
        private @MultiPlayerInput m_Wrapper;
        public MultiPlayerActions(@MultiPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_MultiPlayer_Left;
        public InputAction @Bottom => m_Wrapper.m_MultiPlayer_Bottom;
        public InputAction @Up => m_Wrapper.m_MultiPlayer_Up;
        public InputAction @Right => m_Wrapper.m_MultiPlayer_Right;
        public InputAction @LeftArrow => m_Wrapper.m_MultiPlayer_LeftArrow;
        public InputAction @UpArrow => m_Wrapper.m_MultiPlayer_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_MultiPlayer_DownArrow;
        public InputAction @RightArrow => m_Wrapper.m_MultiPlayer_RightArrow;
        public InputActionMap Get() { return m_Wrapper.m_MultiPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IMultiPlayerActions instance)
        {
            if (m_Wrapper.m_MultiPlayerActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeft;
                @Bottom.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnBottom;
                @Bottom.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnBottom;
                @Bottom.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnBottom;
                @Up.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUp;
                @Right.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRight;
                @LeftArrow.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeftArrow;
                @LeftArrow.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeftArrow;
                @LeftArrow.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnLeftArrow;
                @UpArrow.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUpArrow;
                @UpArrow.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUpArrow;
                @UpArrow.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnUpArrow;
                @DownArrow.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnDownArrow;
                @DownArrow.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnDownArrow;
                @DownArrow.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnDownArrow;
                @RightArrow.started -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRightArrow;
                @RightArrow.performed -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRightArrow;
                @RightArrow.canceled -= m_Wrapper.m_MultiPlayerActionsCallbackInterface.OnRightArrow;
            }
            m_Wrapper.m_MultiPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Bottom.started += instance.OnBottom;
                @Bottom.performed += instance.OnBottom;
                @Bottom.canceled += instance.OnBottom;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @LeftArrow.started += instance.OnLeftArrow;
                @LeftArrow.performed += instance.OnLeftArrow;
                @LeftArrow.canceled += instance.OnLeftArrow;
                @UpArrow.started += instance.OnUpArrow;
                @UpArrow.performed += instance.OnUpArrow;
                @UpArrow.canceled += instance.OnUpArrow;
                @DownArrow.started += instance.OnDownArrow;
                @DownArrow.performed += instance.OnDownArrow;
                @DownArrow.canceled += instance.OnDownArrow;
                @RightArrow.started += instance.OnRightArrow;
                @RightArrow.performed += instance.OnRightArrow;
                @RightArrow.canceled += instance.OnRightArrow;
            }
        }
    }
    public MultiPlayerActions @MultiPlayer => new MultiPlayerActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IMultiPlayerActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnBottom(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
    }
}
